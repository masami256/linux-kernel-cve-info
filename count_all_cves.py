#!/usr/bin/env python3

#
# SPDX-License-Identifier: MIT
#

import argparse
import glob
import os.path
import sys
import os
import subprocess

current_file_path = os.path.abspath(__file__)
sys.path.append(current_file_path)

import common

def find_cves_in_vulns(vulns_dir):
    s = f"{vulns_dir}/cve/published/**/*.mbox"
    data = {}

    files = glob.glob(s)
    idx = 1
    n_files = len(files)

    for f in sorted(files):
        cve = os.path.splitext(os.path.basename(f))[0]
        print(f"[{idx}/{n_files}]Checking {f}\r", end="")
        cwd_dir = os.path.dirname(f)
        cmd = ["git", "log", "--pretty=%cs", "--reverse", os.path.basename(f)]

        result = subprocess.run(cmd, cwd=cwd_dir, capture_output=True, text=True)
        retcode = int(result.returncode)

        if not retcode == 0:
            print(result.stderr)
            exit(1)
        
        cveid = os.path.splitext(os.path.basename(f))
        year = result.stdout.split("\n")[0].split("-")[0]
        if not year in data:
            data[year] = [cveid]
        else:
            data[year].append(cveid)
        idx += 1

    print("\n\r", end="")    
    return data

def main(vulns_dir):
    lore_data = find_cves_in_vulns(vulns_dir)

    conn = common.connect()
    
    nvd_data = common.get_nvd_cve_data_by_year(conn)

    merged_cves = {}


    for y in nvd_data:
        merged_cves[y] = len(list(set(nvd_data.get(y, []) + lore_data.get(y, []))))

    output = "all_cves.csv"
    with open(output, "w") as f:
        f.write("CVE year, count\n")
        for y in merged_cves:
            f.write(f"{y}, {merged_cves[y]}\n")

    print(f"Result is stored in {output}")

if __name__ == "__main__":
    parser = argparse.ArgumentParser()

    parser.add_argument("--vulns-dir", help="path to vulns directory",
            required=True, metavar="VULNSDIR")
    
    args = parser.parse_args()
    
    main(args.vulns_dir)
    